{"version":3,"sources":["App.module.css","components/MainBar/index.js","components/MainBar/MainBar.jsx","components/VisibilityChip/VisibilityChip.jsx","components/VisibilityChip/index.js","components/EntityResultSection/index.js","components/EntityResultSection/EntityResultSection.jsx","fixtures.js","api.js","components/EntitySearchPanel/EntitySearchPanel.jsx","components/EntitySearchPanel/index.js","App.js","serviceWorker.js","index.js","components/VisibilityChip/VisibilityChip.module.css","components/EntityResultSection/EntityResultSection.module.css","components/MainBar/MainBar.module.css","components/EntitySearchPanel/EntitySearchPanel.module.css"],"names":["module","exports","mainGrid","MainBar","react_default","a","createElement","className","styles","root","AppBar_default","position","Toolbar_default","IconButton_default","menuButton","color","aria-label","Menu_default","Typography_default","variant","grow","Button_default","AccountCircle_default","VisibilityChip","isGroup","this","props","Fragment","Avatar_default","concat","avatar","groupAvatar","GroupOutlined_default","counter","Chip_default","lockAvatar","LockOutlined_default","label","renderLabel","clickable","React","PureComponent","defaultProps","EntityResultSection","handleOpenClick","id","alert","handleVisibilityClick","options","visibilityButtonWrapper","onClick","visibilityButton","editable","CreateOutlined_default","VisibilityOutlined_default","_this2","entity","TableHead_TableHead_default","TableRow_TableRow_default","TableCell_TableCell_default","TableBody_TableBody_default","map","slot","key","components_VisibilityChip","visibility","group","renderVisibilityButton","src","owner","profilePicture","alt","fullName","renderCreationDate","creationDate","description","Button_Button_default","datetime","_datetime$split","split","_datetime$split2","Object","slicedToArray","date","time","Component","fakeResults","api","Promise","resolve","setTimeout","tableDivider","TableBody_default","TableRow_default","slim","TableCell_default","colSpan","EntitySearchPanel","state","isLoading","results","handleDetailsClick","handleAddClick","handleStartNewClick","_this","fetchResults","setState","readEntities","then","_this$state","Grid_default","container","direction","justify","alignItems","CircularProgress_default","size","Paper_default","Table_default","TableHead_default","MAX_CELLS","result","idx","components_EntityResultSection","TableFooter_default","footerButtonGroup","theme","createMuiTheme","palette","primary","main","secondary","App","components_MainBar","spacing","item","xs","sm","components_EntitySearchPanel","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2594e6e8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainGrid\":\"App_mainGrid__2w-dY\"};","import MainBar from './MainBar';\n\nexport default MainBar;\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\n\nimport styles from './MainBar.module.css';\n\nconst MainBar = () => (\n  <div className={styles.root}>\n    <AppBar position=\"fixed\">\n      <Toolbar>\n        <IconButton className={styles.menuButton} color=\"inherit\" aria-label=\"Menu\">\n          <MenuIcon />\n        </IconButton>\n        <Typography variant=\"h6\" color=\"inherit\" className={styles.grow}>\n          React <span>❤</span>️ Material Design\n        </Typography>\n        <Button color=\"inherit\"><AccountCircle /></Button>\n      </Toolbar>\n    </AppBar>\n  </div>\n);\n\nexport default MainBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Chip from '@material-ui/core/Chip';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport GroupOutlinedIcon from '@material-ui/icons/GroupOutlined';\nimport Avatar from '@material-ui/core/Avatar';\n\nimport styles from './VisibilityChip.module.css';\n\nconst propTypes = {\n  isGroup: PropTypes.bool,\n};\n\nconst defaultProps = {\n  isGroup: false,\n};\n\nclass VisibilityChip extends React.PureComponent {\n  renderLabel() {\n    const { isGroup } = this.props;\n\n    return (\n      <React.Fragment>\n        {isGroup && (\n          <Avatar className={`${styles.avatar} ${styles.groupAvatar}`}>\n            <GroupOutlinedIcon />\n          </Avatar>\n        )}\n        <span className={styles.counter}>(+3)</span>\n      </React.Fragment>\n    )\n  }\n\n  render() {\n    return (\n      <Chip\n        className={styles.root}\n        avatar={\n          <Avatar className={styles.lockAvatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n        }\n        label={this.renderLabel()}\n        clickable={false}\n      />\n\n    );\n  }\n}\n\nVisibilityChip.propTypes = propTypes;\nVisibilityChip.defaultProps = defaultProps;\n\nexport default VisibilityChip;\n","import VisibilityChip from './VisibilityChip';\n\nexport default VisibilityChip;\n","import EntityResultSection from './EntityResultSection';\n\nexport default EntityResultSection;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport TableHead from '@material-ui/core/TableHead/TableHead';\nimport TableRow from '@material-ui/core/TableRow/TableRow';\nimport TableCell from '@material-ui/core/TableCell/TableCell';\nimport TableBody from '@material-ui/core/TableBody/TableBody';\nimport Button from '@material-ui/core/Button/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport VisibilityOutlinedIcon from '@material-ui/icons/VisibilityOutlined';\nimport CreateOutlinedIcon from '@material-ui/icons/CreateOutlined';\n\nimport VisibilityChip from '../VisibilityChip';\n\nimport styles from './EntityResultSection.module.css';\n\nconst userPropTypes = PropTypes.shape({\n  id: PropTypes.string,\n  fullName: PropTypes.string,\n  profilePicture: PropTypes.string,\n});\n\nconst slotPropTypes = PropTypes.shape({\n  id: PropTypes.string,\n  shared: PropTypes.bool,\n  visibility: PropTypes.object,\n  owner: userPropTypes,\n  creationDate: PropTypes.string,\n  description: PropTypes.string,\n});\n\nconst propTypes = {\n  entity: PropTypes.arrayOf(slotPropTypes).isRequired,\n};\n\nclass EntityResultSection extends Component {\n  static renderCreationDate(datetime) {\n    const [date, time] = datetime.split(' ');\n    return (\n      <Typography variant=\"subtitle1\" className={styles.creationDate}>\n        {date}\n        <br />\n        <span className={styles.time}>{time}</span>\n      </Typography>\n    );\n  }\n\n  handleOpenClick = id => {\n    alert(`Open button clicked for ${id}`);\n  };\n\n  handleVisibilityClick = () => {\n    alert('Visibility button clicked');\n  };\n\n  renderVisibilityButton(options) {\n    return (\n      <span className={styles.visibilityButtonWrapper}>\n        <IconButton onClick={this.handleVisibilityClick} className={styles.visibilityButton}>\n          {options.editable ? (\n            <CreateOutlinedIcon />\n          ) : (\n            <VisibilityOutlinedIcon />\n          )}\n        </IconButton>\n      </span>\n    );\n  }\n\n  render() {\n    const { entity } = this.props;\n\n    return (\n      <React.Fragment>\n        <TableHead>\n          <TableRow>\n            <TableCell>Visibility/Shared</TableCell>\n            <TableCell>Owner</TableCell>\n            <TableCell>Creation date</TableCell>\n            <TableCell>Description</TableCell>\n            <TableCell />\n          </TableRow>\n        </TableHead>\n\n        <TableBody>\n          {entity.map(slot => (\n            <TableRow key={slot.id}>\n              <TableCell>\n                <VisibilityChip isGroup={slot.visibility.group} />\n                {this.renderVisibilityButton(slot.visibility)}\n              </TableCell>\n              <TableCell>\n                <Avatar\n                  className={styles.avatar}\n                  src={slot.owner.profilePicture}\n                  alt={slot.owner.fullName}\n                />\n              </TableCell>\n              <TableCell>\n                {EntityResultSection.renderCreationDate(slot.creationDate)}\n              </TableCell>\n              <TableCell>\n                <Typography variant=\"subtitle1\">{slot.description}</Typography>\n              </TableCell>\n              <TableCell className=\"text-right\">\n                <Button onClick={() => this.handleOpenClick(slot.id)}>\n                  Open\n                </Button>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </React.Fragment>\n    );\n  }\n}\n\nEntityResultSection.propTypes = propTypes;\n\nexport default EntityResultSection;\n","export const fakeOwner1 = {\n  id: '765',\n  fullName: 'Fulanito',\n  profilePicture: 'https://placeimg.com/100/100/animals',\n};\n\nexport const fakeOwner2 = {\n  id: '321',\n  fullName: 'Menganito',\n  profilePicture: 'https://placeimg.com/100/100/nature',\n};\n\nexport const fakeOwner3 = {\n  id: '765',\n  fullName: 'Zutanito',\n  profilePicture: 'https://placeimg.com/100/100/people',\n};\n\nexport const fakeSlot1 = {\n  id: '78',\n  visibility: {\n    editable: false,\n    group: true,\n  },\n  owner: fakeOwner1,\n  creationDate: '2018-09-26 07:13:40',\n  description: 'WannaCry',\n};\n\nexport const fakeSlot2 = {\n  id: '34',\n  visibility: {\n    editable: false,\n  },\n  owner: fakeOwner2,\n  creationDate: '2018-09-26 07:13:40',\n  description: 'Pro investigations',\n};\n\nexport const fakeSlot3 = {\n  id: '999',\n  visibility: {\n    editable: true,\n  },\n  owner: fakeOwner3,\n  creationDate: '2018-09-26 07:13:40',\n  description: 'Lore ipsum investigations',\n};\n\nexport const fakeResults = [\n  [fakeSlot1],\n  [fakeSlot2, fakeSlot3]\n];\n","import { fakeResults } from './fixtures';\n\nclass Api {\n  readEntities() {\n    return new Promise(resolve => setTimeout(resolve, 2000, fakeResults));\n  }\n}\n\nexport default new Api();\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\n\nimport EntityResultSection from '../EntityResultSection';\nimport api from '../../api';\n\nimport styles from './EntitySearchPanel.module.css';\n\nconst MAX_CELLS = 5;\n\nconst tableDivider = (\n  <TableBody>\n    <TableRow className={styles.slim}>\n      <TableCell colSpan={MAX_CELLS} />\n    </TableRow>\n  </TableBody>\n);\n\nclass EntitySearchPanel extends React.Component {\n  state = {\n    isLoading: false,\n    results: null,\n  };\n\n  componentDidMount() {\n    this.fetchResults();\n  }\n\n  fetchResults() {\n    this.setState({ isLoading: true, results: null });\n\n    api.readEntities().then(results => {\n      this.setState({ isLoading: false, results });\n    });\n  }\n\n  handleDetailsClick = () => {\n    alert('Details button clicked');\n  };\n\n  handleAddClick = () => {\n    alert('Add button clicked');\n  };\n\n  handleStartNewClick = () => {\n    this.fetchResults();\n  };\n\n  render() {\n    const { isLoading, results } = this.state;\n\n    if (isLoading) {\n      return (\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <CircularProgress color=\"secondary\" size={70} />\n        </Grid>\n      );\n    }\n\n    if (!results) {\n      return 'No results found';\n    }\n\n    return (\n      <Paper className={styles.root}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell colSpan={MAX_CELLS}>Entity search results</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            <TableRow>\n              <TableCell>IP Results for 1.1.1.1</TableCell>\n              <TableCell colSpan={MAX_CELLS - 1} className=\"text-right\">\n                <Button onClick={this.handleAddClick}>Add</Button>\n                <Button color=\"primary\" onClick={this.handleStartNewClick}>\n                  Start new\n                </Button>\n              </TableCell>\n            </TableRow>\n          </TableBody>\n\n          {results && results.map((result, idx) => (\n            <React.Fragment key={idx}>\n              {tableDivider}\n              <EntityResultSection entity={result} />\n            </React.Fragment>\n          ))}\n\n          {!results && (\n            <TableBody>\n              <TableRow>\n                <TableCell colSpan={MAX_CELLS}>\n                  <Typography variant=\"h6\">No results found</Typography>\n                </TableCell>\n              </TableRow>\n            </TableBody>\n          )}\n\n          <TableFooter>\n            <TableRow>\n              <TableCell colSpan={MAX_CELLS} className={styles.footerButtonGroup}>\n                <Button\n                  color=\"primary\"\n                  variant=\"contained\"\n                  size=\"large\"\n                  onClick={this.handleDetailsClick}\n                >\n                  View Graph Search details\n                </Button>\n              </TableCell>\n            </TableRow>\n          </TableFooter>\n        </Table>\n      </Paper>\n    );\n  }\n}\n\nexport default EntitySearchPanel;\n","import EntitySearchPanel from './EntitySearchPanel';\n\nexport default EntitySearchPanel;\n","import React from 'react';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport MainBar from './components/MainBar';\nimport EntitySearchPanel from './components/EntitySearchPanel';\n\nimport styles from './App.module.css';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: { main: '#394eff' },\n    secondary: { main: '#666666' },\n  },\n});\n\nconst App = () => (\n  <MuiThemeProvider theme={theme}>\n    <MainBar />\n    <Grid\n      container\n      spacing={0}\n      justify=\"center\"\n      alignItems=\"center\"\n      className={styles.mainGrid}\n    >\n      <Grid item xs={true} sm={10}>\n        <EntitySearchPanel />\n      </Grid>\n    </Grid>\n  </MuiThemeProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"VisibilityChip_root__3LW2h\",\"lockAvatar\":\"VisibilityChip_lockAvatar__Gnt_l\",\"groupAvatar\":\"VisibilityChip_groupAvatar__3SJ28\",\"counter\":\"VisibilityChip_counter__39KBL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"creationDate\":\"EntityResultSection_creationDate__34HsQ\",\"time\":\"EntityResultSection_time__IYxjN\",\"avatar\":\"EntityResultSection_avatar__1uXhw\",\"visibilityButtonWrapper\":\"EntityResultSection_visibilityButtonWrapper__2P0qT\",\"visibilityButton\":\"EntityResultSection_visibilityButton__31mDi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"MainBar_root__w36lh\",\"grow\":\"MainBar_grow__1iLUG\",\"menuButton\":\"MainBar_menuButton__2AmJx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"EntitySearchPanel_root__if4Fy\",\"slim\":\"EntitySearchPanel_slim__1zxNb\",\"footerButtonGroup\":\"EntitySearchPanel_footerButtonGroup__LX-h0\"};"],"sourceRoot":""}