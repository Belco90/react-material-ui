{"version":3,"sources":["components/MainBar/index.js","components/MainBar/MainBar.jsx","components/EntityResultSection/index.js","components/EntityResultSection/EntityResultSection.jsx","fixtures.js","api.js","components/EntitySearchPanel/EntitySearchPanel.jsx","components/EntitySearchPanel/index.js","App.js","serviceWorker.js","index.js","components/MainBar/MainBar.module.css","components/EntityResultSection/EntityResultSection.module.css","components/EntitySearchPanel/EntitySearchPanel.module.css","App.module.css"],"names":["MainBar","react_default","a","createElement","className","styles","root","AppBar_default","position","Toolbar_default","IconButton_default","menuButton","color","aria-label","Menu_default","Typography_default","variant","grow","Button_default","AccountCircle_default","EntityResultSection","handleOpenClick","id","alert","concat","_this2","this","entity","props","Fragment","TableHead_TableHead_default","TableRow_TableRow_default","TableCell_TableCell_default","TableBody_TableBody_default","map","slot","key","visibility","Avatar_default","avatar","src","owner","profilePicture","alt","fullName","renderCreationDate","creationDate","description","Button_Button_default","onClick","datetime","_datetime$split","split","_datetime$split2","Object","slicedToArray","date","time","Component","fakeResults","api","Promise","resolve","setTimeout","tableDivider","TableBody_default","TableRow_default","slim","TableCell_default","colSpan","EntitySearchPanel","state","isLoading","results","handleDetailsClick","handleAddClick","handleStartNewClick","_this","fetchResults","setState","readEntities","then","_this$state","Grid_default","container","direction","justify","alignItems","CircularProgress_default","size","Paper_default","Table_default","TableHead_default","MAX_CELLS","result","idx","components_EntityResultSection","TableFooter_default","footerButtonGroup","React","theme","createMuiTheme","palette","primary","main","secondary","App","components_MainBar","spacing","mainGrid","item","xs","sm","components_EntitySearchPanel","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.62d1db2e.chunk.js","sourcesContent":["import MainBar from './MainBar';\n\nexport default MainBar;\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\n\nimport styles from './MainBar.module.css';\n\nconst MainBar = () => (\n  <div className={styles.root}>\n    <AppBar position=\"fixed\">\n      <Toolbar>\n        <IconButton className={styles.menuButton} color=\"inherit\" aria-label=\"Menu\">\n          <MenuIcon />\n        </IconButton>\n        <Typography variant=\"h6\" color=\"inherit\" className={styles.grow}>\n          React <span>❤</span>️ Material Design\n        </Typography>\n        <Button color=\"inherit\"><AccountCircle /></Button>\n      </Toolbar>\n    </AppBar>\n  </div>\n);\n\nexport default MainBar;\n","import EntityResultSection from './EntityResultSection';\n\nexport default EntityResultSection;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport TableHead from '@material-ui/core/TableHead/TableHead';\nimport TableRow from '@material-ui/core/TableRow/TableRow';\nimport TableCell from '@material-ui/core/TableCell/TableCell';\nimport TableBody from '@material-ui/core/TableBody/TableBody';\nimport Button from '@material-ui/core/Button/Button';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\n\nimport styles from './EntityResultSection.module.css';\n\nconst userPropTypes = PropTypes.shape({\n  id: PropTypes.string,\n  fullName: PropTypes.string,\n  profilePicture: PropTypes.string,\n});\n\nconst slotPropTypes = PropTypes.shape({\n  id: PropTypes.string,\n  shared: PropTypes.bool,\n  visibility: PropTypes.string,\n  owner: userPropTypes,\n  creationDate: PropTypes.string,\n  description: PropTypes.string,\n});\n\nconst propTypes = {\n  entity: PropTypes.arrayOf(slotPropTypes).isRequired,\n};\n\nclass EntityResultSection extends Component {\n  static renderCreationDate(datetime) {\n    const [date, time] = datetime.split(' ');\n    return (\n      <Typography variant=\"subtitle1\" className={styles.creationDate}>\n          {date}\n          <br />\n          <span className={styles.time}>{time}</span>\n      </Typography>\n    );\n  }\n\n  handleOpenClick = id => {\n    alert(`Open button clicked for ${id}`);\n  };\n\n  render() {\n    const { entity } = this.props;\n\n    return (\n      <React.Fragment>\n        <TableHead>\n          <TableRow>\n            <TableCell>Visibility/Shared</TableCell>\n            <TableCell>Owner</TableCell>\n            <TableCell>Creation date</TableCell>\n            <TableCell>Description</TableCell>\n            <TableCell />\n          </TableRow>\n        </TableHead>\n\n        <TableBody>\n          {entity.map(slot => (\n            <TableRow key={slot.id}>\n              <TableCell>{slot.visibility}</TableCell>\n              <TableCell>\n                <Avatar\n                  className={styles.avatar}\n                  src={slot.owner.profilePicture}\n                  alt={slot.owner.fullName}\n                />\n              </TableCell>\n              <TableCell>\n                {EntityResultSection.renderCreationDate(slot.creationDate)}\n              </TableCell>\n              <TableCell>\n                <Typography variant=\"subtitle1\">{slot.description}</Typography>\n              </TableCell>\n              <TableCell className=\"text-right\">\n                <Button onClick={() => this.handleOpenClick(slot.id)}>\n                  Open\n                </Button>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </React.Fragment>\n    );\n  }\n}\n\nEntityResultSection.propTypes = propTypes;\n\nexport default EntityResultSection;\n","export const fakeOwner1 = {\n  id: '765',\n  fullName: 'Fulanito',\n  profilePicture: 'https://placeimg.com/100/100/animals',\n};\n\nexport const fakeOwner2 = {\n  id: '321',\n  fullName: 'Menganito',\n  profilePicture: 'https://placeimg.com/100/100/nature',\n};\n\nexport const fakeOwner3 = {\n  id: '765',\n  fullName: 'Zutanito',\n  profilePicture: 'https://placeimg.com/100/100/people',\n};\n\nexport const fakeSlot1 = {\n  id: '78',\n  visibility: 'foo',\n  owner: fakeOwner1,\n  creationDate: '2018-09-26 07:13:40',\n  description: 'WannaCry',\n};\n\nexport const fakeSlot2 = {\n  id: '34',\n  visibility: 'bar',\n  owner: fakeOwner2,\n  creationDate: '2018-09-26 07:13:40',\n  description: 'Pro investigations',\n};\n\nexport const fakeSlot3 = {\n  id: '999',\n  visibility: 'baz',\n  owner: fakeOwner3,\n  creationDate: '2018-09-26 07:13:40',\n  description: 'Lore ipsum investigations',\n};\n\nexport const fakeResults = [\n  [fakeSlot1],\n  [fakeSlot2, fakeSlot3]\n];\n","import { fakeResults } from './fixtures';\n\nclass Api {\n  readEntities() {\n    return new Promise(resolve => setTimeout(resolve, 2000, fakeResults));\n  }\n}\n\nexport default new Api();\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\n\nimport EntityResultSection from '../EntityResultSection';\nimport api from '../../api';\n\nimport styles from './EntitySearchPanel.module.css';\n\nconst MAX_CELLS = 5;\n\nconst tableDivider = (\n  <TableBody>\n    <TableRow className={styles.slim}>\n      <TableCell colSpan={MAX_CELLS} />\n    </TableRow>\n  </TableBody>\n);\n\nclass EntitySearchPanel extends React.Component {\n  state = {\n    isLoading: false,\n    results: null,\n  };\n\n  componentDidMount() {\n    this.fetchResults();\n  }\n\n  fetchResults() {\n    this.setState({ isLoading: true, results: null });\n\n    api.readEntities().then(results => {\n      this.setState({ isLoading: false, results });\n    });\n  }\n\n  handleDetailsClick = () => {\n    alert('Details button clicked');\n  };\n\n  handleAddClick = () => {\n    alert('Add button clicked');\n  };\n\n  handleStartNewClick = () => {\n    this.fetchResults();\n  };\n\n  render() {\n    const { isLoading, results } = this.state;\n\n    if (isLoading) {\n      return (\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <CircularProgress color=\"secondary\" size={70} />\n        </Grid>\n      );\n    }\n\n    if (!results) {\n      return 'No results found';\n    }\n\n    return (\n      <Paper className={styles.root}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell colSpan={MAX_CELLS}>Entity search results</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            <TableRow>\n              <TableCell>IP Results for 1.1.1.1</TableCell>\n              <TableCell colSpan={MAX_CELLS - 1} className=\"text-right\">\n                <Button onClick={this.handleAddClick}>Add</Button>\n                <Button color=\"primary\" onClick={this.handleStartNewClick}>\n                  Start new\n                </Button>\n              </TableCell>\n            </TableRow>\n          </TableBody>\n\n          {results && results.map((result, idx) => (\n            <React.Fragment key={idx}>\n              {tableDivider}\n              <EntityResultSection entity={result} />\n            </React.Fragment>\n          ))}\n\n          {!results && (\n            <TableBody>\n              <TableRow>\n                <TableCell colSpan={MAX_CELLS}>\n                  <Typography variant=\"h6\">No results found</Typography>\n                </TableCell>\n              </TableRow>\n            </TableBody>\n          )}\n\n          <TableFooter>\n            <TableRow>\n              <TableCell colSpan={MAX_CELLS} className={styles.footerButtonGroup}>\n                <Button\n                  color=\"primary\"\n                  variant=\"contained\"\n                  size=\"large\"\n                  onClick={this.handleDetailsClick}\n                >\n                  View Graph Search details\n                </Button>\n              </TableCell>\n            </TableRow>\n          </TableFooter>\n        </Table>\n      </Paper>\n    );\n  }\n}\n\nexport default EntitySearchPanel;\n","import EntitySearchPanel from './EntitySearchPanel';\n\nexport default EntitySearchPanel;\n","import React from 'react';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport MainBar from './components/MainBar';\nimport EntitySearchPanel from './components/EntitySearchPanel';\n\nimport styles from './App.module.css';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: { main: '#394eff' },\n    secondary: { main: '#666666' },\n  },\n});\n\nconst App = () => (\n  <MuiThemeProvider theme={theme}>\n    <MainBar />\n    <Grid\n      container\n      spacing={40}\n      justify=\"center\"\n      alignItems=\"center\"\n      className={styles.mainGrid}\n    >\n      <Grid item xs={true} sm={10}>\n        <EntitySearchPanel />\n      </Grid>\n    </Grid>\n  </MuiThemeProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"MainBar_root__w36lh\",\"grow\":\"MainBar_grow__1iLUG\",\"menuButton\":\"MainBar_menuButton__2AmJx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"creationDate\":\"EntityResultSection_creationDate__34HsQ\",\"time\":\"EntityResultSection_time__IYxjN\",\"avatar\":\"EntityResultSection_avatar__1uXhw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"EntitySearchPanel_root__if4Fy\",\"slim\":\"EntitySearchPanel_slim__1zxNb\",\"footerButtonGroup\":\"EntitySearchPanel_footerButtonGroup__LX-h0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainGrid\":\"App_mainGrid__2w-dY\"};"],"sourceRoot":""}